from extensions.plugin_base import PluginBase
import urllib2
from poster.encode import multipart_encode
from poster.streaminghttp import register_openers
import json
import os

class VirusTotal(PluginBase):

    @staticmethod
    def get_name():
        return 'virustotal'
    def initialize_config(self, config):
        self.apikey = config.get(VirusTotal.get_name(), "apikey")
    
    
    def submit_file_for_scan(self,filepath):
        """ Submits a file to be scanned
            Returns the JSON response
        """     
        # Register the streaming http handlers with urllib2
        register_openers()
        # Extract the file name
        filename = os.path.basename(filepath)
        try:
            datagen, headers = multipart_encode({"name": filename, "file": open(filepath, "rb"), "apikey":self.apikey})
            # Create the Request object
            request = urllib2.Request("https://www.virustotal.com/vtapi/v2/file/scan", datagen, headers)
            # Submit the file and read the reply
            submission_info =  urllib2.urlopen(request).read()
            # This is the json data return upon submission
            # Reference this data for the scan_id for future
            # lookups.
            
            return submission_info
        except Exception, err:
            print err
            return
    
    def lookup_by_hash(self, sample_hash):
        query_dict = {
            "endpoint": "https://www.virustotal.com/vtapi/v2/file/report",
            "apikey": self.apikey,
            "resource": sample_hash,
        }

        url = "{endpoint}?apikey={apikey}&resource={resource}".format(**query_dict)
        return urllib2.urlopen(url).read()
    
    def analyze(self, malware_sample):
        # Lookup details for the sample on virus total
        json_response = self.lookup_by_hash(malware_sample.hash_sha256)
        # Set the report name
        self.report_name = "virustotal_details.json"
        # Save the json in a pretty format
        self.report = json.dumps(json.loads(json_response), sort_keys=True,
                  indent=4)
        
    def create_report(self):
        print "Creating report"
        dir = self.__class__.get_name()
        report_dir = os.path.join(self.analysis_report_directory, dir)
        try:
            if not os.path.exists(report_dir):
                os.makedirs(report_dir)
            super(VirusTotal,self).create_report(self.report, os.path.join(report_dir,self.report_name))
        except Exception, err:
            print err
            